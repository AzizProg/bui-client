/* eslint-disable react/jsx-key */
"use client";

import Link from "next/link";
import { ArrowUpRight, CreditCard, DollarSign, Users } from "lucide-react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  
  fetchCustomers,
  fetchTransactions,

} from "@/lib/fetchData";
import { useState, useEffect } from "react";
import { CustomersEntity } from "@/lib/customer-entity";
import { TransactionsEntity } from "@/lib/transaction-entity";

const DashboardPage = () => {
  //transactions useStates
  const [lastFiveTransactions, setLastFiveTransactions] = useState<
    TransactionsEntity[] | null
  >(null);
  const [totalTransactions, setTotalTransactions] = useState<
    number | undefined
  >(undefined);
  const [totalTransactionsAmount, setTotalTransactionsAmount] = useState<
    number | undefined
  >(undefined);

  //customers useStates
  const [totalCustomers, setTotalCustomers] = useState<number | undefined>(
    undefined
  );
  const [lastFiveCustomers, setLastFiveCustomers] = useState<
    CustomersEntity[] | null
  >(null);

  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function getTransactions() {
      try {
        let data = await fetchTransactions();

        if (data) {
          // Calculate total amount
          const totalAmount = data.reduce(
            (total, transaction) => total + transaction.amount,
            0
          );
          setTotalTransactionsAmount(totalAmount);

          // Define total transactions
          setTotalTransactions(data.length);

          // Format date from db generated by prisma
          data = data.map((e) => ({
            ...e,
            created_at: new Date(e.created_at),
          }));

          // Get five last transactions
          const lastFiveTransactions = data.slice(0, 5);
          setLastFiveTransactions(lastFiveTransactions);
        }
      } catch (err) {
        setError("Failed to load transactions");
      }
    }
    async function getCustomers() {
      try {
        let data = await fetchCustomers();

        if (data) {
          //  total users
          setTotalCustomers(data.length);
          // Get five last transactions
          data = data.map((e) => ({
            ...e,
            create_at: new Date(e.create_at),
          }));
          const lastFiveCustomers = data.slice(0, 5);
          
          setLastFiveCustomers(lastFiveCustomers);
        }
      } catch (err) {
        setError("Failed to load transactions");
      }
    }
    getTransactions();
    getCustomers();
  }, []);

  return (
    <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
      <div className="grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-3">
        {/* Cash flow  part */}
        <Card className="text-white bg-gradient-to-bl from-appcolors-first-color to-appcolors-third-olor">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total cash flow
            </CardTitle>
            <DollarSign
              color="white"
              className="h-4 w-4 text-muted-foreground bold"
            />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalTransactionsAmount} FCFA
            </div>
          </CardContent>
        </Card>

        {/* Users part */}
        <Card className="text-white bg-gradient-to-bl from-appcolors-first-color to-appcolors-third-olor">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total users</CardTitle>
            <Users color="white" className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalCustomers}</div>
          </CardContent>
        </Card>

        {/* Transactions users part */}
        <Card className="text-white bg-gradient-to-bl from-appcolors-first-color to-appcolors-third-olor">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Transactions</CardTitle>
            <CreditCard
              color="white"
              className="h-4 w-4 text-muted-foreground"
            />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalTransactions}</div>
          </CardContent>
        </Card>
      </div>
      <div className="grid gap-4 md:gap-8 lg:grid-cols-2 xl:grid-cols-3">
        {/* Transactions part */}
        <Card className="xl:col-span-2">
          <CardHeader className="flex flex-row items-center">
            <div className="grid gap-2">
              <CardTitle>Transactions</CardTitle>
              <CardDescription>
                Recent transactions from wallet.
              </CardDescription>
            </div>
            <Button asChild size="sm" className="ml-auto gap-1">
              <Link href="/dashboard/transactions">
                View All
                <ArrowUpRight className="h-4 w-4" />
              </Link>
            </Button>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>NÂ°</TableHead>
                  <TableHead>Type</TableHead>

                  <TableHead>Amount</TableHead>
                  <TableHead>Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {lastFiveTransactions ? (
                  lastFiveTransactions.map((transaction) => (
                    <TableRow key={transaction.id}>
                      <TableCell>{transaction.id}</TableCell>
                      <TableCell>{transaction.type}</TableCell>

                      <TableCell>{transaction.amount} FCFA</TableCell>
                      <TableCell>
                        {transaction.created_at.getDay() +
                          "/" +
                          transaction.created_at.getMonth() +
                          "/" +
                          transaction.created_at.getFullYear()}
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center">
                      No transactions found
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        {/*Recent users part */}
        <Card>
          <CardHeader>
            <CardTitle>Customers</CardTitle>
            <CardDescription>Recent customer registered.</CardDescription>
          </CardHeader>
          <CardContent className="grid gap-8">
            {lastFiveCustomers?(lastFiveCustomers.map((customer)=>(
              <div className="flex items-center gap-4">
              <Avatar className="hidden h-9 w-9 sm:flex">
                <AvatarFallback>{customer.username.slice(0,2).toUpperCase()}</AvatarFallback>
              </Avatar>
              <div className="grid gap-1">
                <p className="text-sm font-medium leading-none">
                  {customer.username}
                </p>
              </div>
              <div className="ml-auto font-medium"> {customer.create_at.getDay() +
                          "/" +
                          customer.create_at.getMonth() +
                          "/" +
                          customer.create_at.getFullYear()}</div>
            </div>
            ))):(<p className="w-full mx-auto flex justify-center" >No customers found</p>)}
            
            
          </CardContent>
        </Card>
      </div>
    </main>
  );
};

export default DashboardPage;
